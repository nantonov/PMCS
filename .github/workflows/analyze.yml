name: My Test Monorepo Project
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  ReactScan:
    name: ReactScan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: PMCS/Client/react-pmcs
  AuthServiceScan:
    name: AuthServiceScan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarScanner for .NET 6 with pull request decoration support
        uses: highbyte/sonarscan-dotnet@v2.1.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          sonarProjectKey: nantonov_PMCS_Authorization
          sonarProjectName:  PMCS Authorization Service
          sonarOrganization: nantonov
          dotnetBuildArguments: PMCS/Services/AuthorizationService/AuthorizationService.sln
          dotnetTestArguments: PMCS/Services/AuthorizationService/AuthorizationService.sln --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
  PetServiceScan:
    name: PetServiceScan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarScanner for .NET 6 with pull request decoration support
        uses: highbyte/sonarscan-dotnet@v2.1.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          sonarProjectKey: nantonov_PMCS_Pet
          sonarProjectName:  PMCS Pet Service
          sonarOrganization: nantonov
          dotnetBuildArguments: PMCS/Services/PetService/PMCS.sln
          dotnetTestArguments: PMCS/Services/PetService/PMCS.sln --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
  ScheduleServiceScan:
    name: ScheduleServiceScan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarScanner for .NET 6 with pull request decoration support
        uses: highbyte/sonarscan-dotnet@v2.1.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          sonarProjectKey: nantonov_PMCS_Schedule
          sonarProjectName:  PMCS Schedule Service
          sonarOrganization: nantonov
          dotnetBuildArguments: PMCS/Services/ScheduleService/ScheduleService.sln
          dotnetTestArguments: PMCS/Services/ScheduleService/ScheduleService.sln --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
  NotificationServiceScan:
    name: NotificationServiceScan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarScanner for .NET 6 with pull request decoration support
        uses: highbyte/sonarscan-dotnet@v2.1.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          sonarProjectKey: nantonov_PMCS_Notification
          sonarProjectName:  PMCS Notification Service
          sonarOrganization: nantonov
          dotnetBuildArguments: PMCS/Services/NotificationService/NotificationService.sln
          dotnetTestArguments: PMCS/Services/NotificationService/NotificationService.sln --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          